max(gdd)
gdd[1,1]
sum((x[1,]-y[,1])^2)
sqrt(sum((x[1,]-y[,1])^2))
dd[1,1]
??distance
class(gdd)
sum((x[1,]-y[,1])^2)
distMatrix
class(dd)
dd0<-array(0,dim=dim(dd))
for (i in 1:nrow(x)){for(j in nrow(y)){dd0[i,j]<-sum((x[i,]^x[j,])^2)}}
dd0[1,1]
for (i in 1:nrow(x)){for(j in nrow(y)){dd0[i,j]<-sum((x[i,]-y[j,])^2)}}
dd0[1,1]
dim(dd0)
dd[1,1]
sum((x[1,]-y[1,])^2)
for (i in 1:nrow(x)){for(j in 1:nrow(y)){dd0[i,j]<-sum((x[i,]-y[j,])^2)}}
dd0[1,1]
dd0[1,2]
dd[1,2]
gdd[1,1]
gdd[1,1]^2
gdd[1,2]^2
?distance
mb2<-microbenchmark({dd<-distance(gpuMatrix(x),gpuMatrix(y),method="sqEuclidean"); dp<-tinyCDP(dd)},times=10)
mb2<-microbenchmark({dd<-distance(gpuMatrix(x),gpuMatrix(y),method="sqEuclidean"); dp<-tinyCDP(as.matrix(dd))},times=10)
summary(mb2)
summary(mb1)
distance
?vclMatrix
?gpuMatrix
??prime
x<-NULL
library(numbers)
for (i in 2:1000){if (isPrime(i)){x<-rbind(x,data.frame(x=i*cos(i),y=i*sin(i)))}}
plot(x)
x<-NULL
for (i in 2:5000){if (isPrime(i)){x<-rbind(x,data.frame(x=i*cos(i),y=i*sin(i)))}}
plot(x,cex=0.1)
dim(x)
for (i in 2:50000){if (isPrime(i)){x<-rbind(x,data.frame(x=i*cos(i),y=i*sin(i)))}}
dim(x)
plot(x,cex=0.1)
source("~/.active-rstudio-document")
E<-0.021*299792458^2
E
E/3600
E/3600/1000^2
E/3600/1000^3
1000000*1000*3600*24*30
5^3
5^3*2.24
tryCatch({sqrt(NA)},error=function(e){cat("Error\n")})
tryCatch({sqrt(-1)},error=function(e){cat("Error\n")})
tryCatch({stop("")},error=function(e){cat("Error\n")})
%catch%(x,...) <- tryCatch(x,...)
%catch%<-function(x,...)  tryCatch(x,...)
`%catch%`<-function(x,...)  tryCatch(x,...)
{stop("")} %catch% (error=function(e){cat("Error\n")})
{stop("")} %catch% error=function(e){cat("Error\n")}
{stop("")} %catch% {error=function(e){cat("Error\n")}}
?tryCatch
tryCatch
i<-1
while (i %% 13 != 0) {i < i*10+1}
while (i %% 13 != 0) {i < i*10+1; cat(i,"->",i%%13,"\n")}
while (i %% 13 != 0) {cat(i,"->",i%%13,"\n");i <- i*10+1}
while (i %% 13 != 0) {cat(i,"->",i%%13,"\n");i <- i*10+1}; print(i)
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark({x<-rnorm(10^7)})
rm("x")
microbenchmark({sum(rnorm(10^7))})
microbenchmark({sum(rnorm(10^5))})
microbenchmark({sum(rnorm(10^5))},n=1)
?microbenchmark
microbenchmark({sum(rnorm(10^7))},times=)
microbenchmark({sum(rnorm(10^7))},times=1)
%then% <- function(x,y){y(x)}
`%then%` <- function(x,y){y(x)}
2 %then% sqrt
2 %then% sqrt()
?expression
expression(expr())
expression(sqrt())
x<-expression(sqrt())
eval(x)
length(x)
x[1]
install.packages("datamart")
library(datamart)
db <- dbpedia(lang="ja")
?dbpedia
db <- dbpedia(lang="ja")
traceback()
?xsparql
db <- dbpedia()
dbpedia
setwd("E:/incense/R")
library(torch)
?nn_lstm
x <- torch_tensor(c(1,2,3))
x$device
?nn_embedding
source("E:/incense/R/simpletorch.R")
source("E:/incense/R/checker.R")
?nn_lstm
?nn_linear
model <- generate_net(
list(
list("embedding",num_embeddings=100,embedding_dim=10),
list("lstm",input_size=10,hidden_size=5),
list("linear",in_features=5,1)))
model
cons <- get_consistency(
list(
list("embedding",num_embeddings=100,embedding_dim=10),
list("lstm",input_size=10,hidden_size=5),
list("linear",in_features=5,1)))
source("E:/incense/R/checker.R")
cons <- get_consistency(
list(
list("embedding",num_embeddings=100,embedding_dim=10),
list("lstm",input_size=10,hidden_size=5),
list("linear",in_features=5,1)))
source("E:/incense/R/checker.R")
cons <- get_consistency(
list(
list("embedding",num_embeddings=100,embedding_dim=10),
list("lstm",input_size=10,hidden_size=5),
list("linear",in_features=5,1)))
cons
dim_check(cons)
source("E:/incense/R/checker.R")
dim_check(cons)
source("~/.active-rstudio-document")
source("E:/incense/R/checker.R")
dim_check(cons)
?torch_transpose
source("E:/incense/R/checker.R")
dim_check(cons)
?nn_lstm
source("E:/incense/R/checker.R")
source("E:/incense/R/checker.R")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
indim
dim(indim)
source("E:/incense/R/checker.R")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
dim_check(cons,verbose=TRUE)
source("E:/incense/R/checker.R")
source("E:/incense/R/checker.R")
dim_check(cons,verbose=TRUE)
source("E:/incense/R/checker.R")
dim_check(cons,verbose=TRUE)
source("~/.active-rstudio-document")
dim_check(cons,verbose=TRUE)
dim_check(cons,verbose=TRUE,dimension=c(16,50))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("E:/incense/R/checker.R")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
x <- torch_tensor(array(1:24,dim=c(2,3,4)))
x
x[1,,]
x[,1,]
?nn_embedding
emb <- nn_embedding(10,10)
emb(dl$dataset$train$x)
source("E:/incense/R/simpletorch.R")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
?nn_conv1d
source("~/.active-rstudio-document")
x <- list(a=1,b=2,c=#foo)
)
x <- list(a=1,b=2,c="foo")
x
x[["a"]] <- NULL
x
x[["a"]] <- NULL
x
source("E:/incense/R/simpletorch.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
cons <- get_consistency(topology)
cons[[3]]
cons[[2]]
topology
source("E:/incense/R/checker.R")
cons <- get_consistency(topology)
source("E:/incense/R/checker.R")
cons <- get_consistency(topology)
outout_type
l
get_value(l,0,"output_type","last")
l
l[["output_type"]]
source("E:/incense/R/checker.R")
cons <- get_consistency(topology)
cons <- get_consistency(topology)
dim_check(cons,verbose=TRUE)
??transpose
Foo <- R6Class("Foo",public=list(initialize=function(){}))
library(R6)
Foo <- R6Class("Foo",public=list(initialize=function(){}))
foo <- Foo$new()
foo
foo(1)
i <- 10
foo <- function() {i+1}
foo()
foo()
i <- 12
foo()
foo <- function() {function(){i+1}}
foo2 <- foo()
foo2()
i < -20
i <- 20
foo2()
?nn_module
transpose <- torch::nn_module {
"transpose",
initialize = function(i,j) {
self$i <- i
self$j <- j
},
forward = function(x) {
torch_transpose(x,self$i,self$j)
}
}
transpose <- torch::nn_module(
"transpose",
initialize = function(i,j) {
self$i <- i
self$j <- j
},
forward = function(x) {
torch_transpose(x,self$i,self$j)
}
)
tp <- transpose(1,2)
tp
x <- torch_tensor(matrix(1:6,nrow=3))
x
tp(x)
?torch_transpose
source("E:/incense/R/checker.R")
source("E:/incense/R/checker.R")
?nn_conv1d
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
dim_check(topology,verbose=TRUE)
topology
source("~/.active-rstudio-document")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
get_consistency(topology)
get_consistency
get_consistency(topology)
topo <- topology
chooseval <- function(x,n) {ifelse(length(x) < n, x[1], x[n])}
dimlist <- vector(mode="list",length=length(topo))
for (layer in seq_along(topo)) {
l <- topo[[layer]]
llen <- length(l)
module_name <- l[[1]]
if (module_name == "linear") {
in_dim <- get_value(l,2,"in_features")
out_dim <- get_value(l,3,"out_features")
dimlist[[layer]] <- list(
indim=c(NA,in_dim),
outdim=CheckerList$new(IdentityChecker$new(),ConstChecker$new(out_dim)))
} else if (module_name == "conv1d") {
in_channel <- get_value(l,2,"in_channels")
out_channel <- get_value(l,3,"out_channels")
ksize <- get_value(l,4,"kernel_size")
stride <- get_value(l,5,"stride",1)
padding <- get_value(l,6,"padding",0)
dilation <- get_value(l,7,"dilation",1)
check <- ConvolutionChecker$new(padding,dilation,ksize, stride)
dimlist[[layer]]$indim <- c(NA,in_channel,NA)
dimlist[[layer]]$outdim <- CheckerList$new(
IdentityChecker$new(),
ConstChecker$new(out_channel),
check)
} else if (module_name == "conv2d") {
in_channel <- get_value(l,2,"in_channels")
out_channel <- get_value(l,3,"out_channels")
ksize <- get_value(l,4,"kernel_size")
stride <- get_value(l,5,"stride",1)
padding <- get_value(l,6,"padding",0)
dilation <- get_value(l,7,"dilation",1)
check1 <- ConvolutionChecker$new(
chooseval(padding,1),
chooseval(dilation,1),
chooseval(ksize,1),
chooseval(stride,1)
)
check2 <- ConvolutionChecker$new(
chooseval(padding,2),
chooseval(dilation,2),
chooseval(ksize,2),
chooseval(stride,2)
)
dimlist[[layer]]$indim <- c(NA,in_channel,NA,NA)
dimlist[[layer]]$outdim <- CheckerList$new(IdentityChecker$new(),
ConstChecker$new(out_channel),
check1,check2)
} else if (module_name == "maxpool1d") {
if (layer == 1) {
stop("Do not use maxpool at the first layer")
}
ksize <- get_value(l,2,"kernel_size")
stride <- get_value(l,3,"stride",ksize)
padding <- get_value(l,4,"padding",0)
dilation <- get_value(l,5,"dilation",1)
check <- ConvolutionChecker$new(padding,dilation,ksize, stride)
dimlist[[layer]]$indim <- c(NA,NA,NA)
dimlist[[layer]]$outdim <- CheckerList$new(IdentityChecker$new(),
ConstChecker$new(out_channel),
check)
} else if (module_name == "maxpool2d") {
if (layer == 1) {
stop("Do not use maxpool at the first layer")
}
ksize <- get_value(l,2,"kernel_size")
stride <- get_value(l,3,"stride",ksize)
padding <- get_value(l,4,"padding",0)
dilation <- get_value(l,5,"dilation",1)
check1 <- ConvolutionChecker$new(
chooseval(padding,1),
chooseval(dilation,1),
chooseval(ksize,1),
chooseval(stride,1)
)
check2 <- ConvolutionChecker$new(
chooseval(padding,2),
chooseval(dilation,2),
chooseval(ksize,2),
chooseval(stride,2)
)
dimlist[[layer]]$indim <- c(NA,NA,NA,NA)
dimlist[[layer]]$outdim <- CheckerList$new(IdentityChecker$new(),
ConstChecker$new(out_channel),
check1,check2)
} else if (module_name == "maxunpool1d") {
if (layer == 1) {
stop("Do not use maxunpool at the first layer")
}
ksize <- get_value(l,2,"kernel_size")
stride <- get_value(l,3,"stride",ksize)
padding <- get_value(l,4,"padding",0)
check <- UnConvolutionChecker$new(padding,ksize, stride)
dimlist[[layer]]$indim <- dim_check(dimlist,to=layer-1)
dimlist[[layer]]$outdim <- CheckerList$new(IdentityChecker$new(),
ConstChecker$new(out_channel),
check)
} else if (module_name == "maxunpool2d") {
if (layer == 1) {
stop("Do not use maxpool at the first layer")
}
ksize <- get_value(l,2,"kernel_size")
stride <- get_value(l,3,"stride",ksize)
padding <- get_value(l,4,"padding",0)
check1 <- UnConvolutionChecker$new(
chooseval(padding,1),
chooseval(ksize,1),
chooseval(stride,1)
)
check2 <- UnConvolutionChecker$new(
chooseval(padding,2),
chooseval(ksize,2),
chooseval(stride,2)
)
dimlist[[layer]]$indim <- dim_check(dimlist,to=layer-1)
dimlist[[layer]]$outdim <- CheckerList$new(IdentityChecker$new(),
ConstChecker$new(out_channel),
check1,check2)
} else if (module_name %in% c("dropout","dropout2d","relu","sigmoid","tanh",
"softmax","layernorm","batchnorm1d","batchnorm2d")) {
if (layer == 1) {
stop("No input dimension specified at the first layer")
}
d <- dimlist[[layer-1]]$outdim
dimlist[[layer]]$indim <- rep(NA,d$length())
dimlist[[layer]]$outdim <- CheckerList$new()
for (i in seq_len(d$length())) {
dimlist[[layer]]$outdim$append(IdentityChecker$new())
}
} else if (module_name == "flatten") {
start_dim <- get_value(l,2,"start_dim",1)
end_dim <- get_value(l,3,"end_dim",-1)
if (layer == 1) {
stop("Please do not use flatten at the first layer")
}
indim <- dim_check(dimlist,to=layer-1)
dimlist[[layer]]$indim <- indim
dimlist[[layer]]$outdim <- FlattenCheckerList$new(length(indim),start_dim,end_dim)
} else if (module_name == "embedding") {
num_embeddings <- get_value(l,2,"num_embeddings")
embedding_dim <- get_value(l,3,"embedding_dim")
dimlist[[layer]]$indim <- c(NA,NA)
dimlist[[layer]]$outdim <- EmbeddingCheckerList$new(embedding_dim)
} else if (module_name == "lstm") {
input_size <- get_value(l,2,"input_size")
num_hidden <- get_value(l,3,"num_hidden")
bidirectional <- get_value(l,0,"bidirectional",FALSE)
output_type <- get_value(l,0,"output_type","last")
dimlist[[layer]]$indim <- c(NA,NA,input_size)
dimlist[[layer]]$outdim <- LSTMCheckerList$new(
num_hidden,bidirectional,output_type
)
} else if (module_name == "transpose") {
if (layer == 1) {
stop("Do not use transpose at the first layer")
}
dim0 <- get_value(l,2,"dim0")
dim1 <- get_value(l,3,"dim1")
d <- dimlist[[layer-1]]$outdim
dimlist[[layer]]$indim <- rep(NA,d$length())
dimlist[[layer]]$outdim <- TransposeCheckerList$new(dim0,dim1)
} else {
stop(paste("Module",module_name,"not supported"))
}
dimlist[[layer]]$name <- module_name
}
dimlist[[layer]]
length(dimlsit)
length(dimlist)
l
d
d$length()
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
source("E:/incense/R/checker.R")
source("~/.active-rstudio-document")
library(devtools)
x<-list(1,2,3)
x
y<-list(4,5,6)
y
append(x,y)
append(list(x,y))
lapply(list(x,y),append)
??apply
??call
do.call(append,list(x,y))
source("C:/Users/Akinori Ito/Downloads/incense/R/net.R")
x<-generate_net(list(list("linear",10,1)))
y<-generate_net(list(list("linear",1,10)))
x
x$topology
z<-cascade_network(list(x,y))
z
z$topology
length(list())
source("C:/Users/Akinori Ito/Downloads/incense/R/net.R")
z<-cascade_network(list(x,y))
z
z$forward(torch_tensor(runif(10)))
??tensor
library(torch)
z$forward(torch_tensor(runif(10)))
setwd("..")
instll()
lirary(devtools)
library(devtools)
install()
install()
dd <- matrix(runif(1000),ncol=10)
dl <- prepare_dataloader(dd,dd,torch_float32,torch_float32)
dl <- incense::prepare_dataloader(dd,dd,torch_float32,torch_float32)
dl <- incense::prepare_dataloader(dd,dd,torch_float32,torch_float32)
dl <- incense::prepare_dataloader(dd,dd,torch_float32(),torch_float32())
tt <- incense::train(dl,,model=z)
source("C:/Users/Akinori Ito/Downloads/incense/R/train.R")
tt <- train(dl,,model=z)
tt <- train(dl,,model=z,optim="adam",loss="mse",nepoch=10)
source("C:/Users/Akinori Ito/Downloads/incense/R/net.R")
source("C:/Users/Akinori Ito/Downloads/incense/R/data.R")
source("C:/Users/Akinori Ito/Downloads/incense/R/checker.R")
source("C:/Users/Akinori Ito/Downloads/incense/R/others.R")
tt <- train(dl,,model=z,optim="adam",loss="mse",nepoch=10)
tt <- train(dl$dataloader,model=z,optim="adam",loss="mse",nepoch=10)
tt <- train(dl$dataloader$train,model=z,optim="adam",loss="mse",nepoch=10)
traceback()
z$topology
model1 <- generate_net(list(list("linear",10,5)))
model2 <- generate_net(list(list("linear",5,10)))
model1$topology
source("C:/Users/Akinori Ito/Downloads/incense/R/net.R")
model12 <- cascade_net(list(model1,model1))
model12$topology
append(model1$topology,model2$topology)
model1$topology
c(model1$topology,model2$topology)
